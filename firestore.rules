rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['ADMIN', 'DIRECTOR']);
    }

    function canManageClients() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['ADMIN', 'DIRECTOR', 'PROJECT_MANAGER']);
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // Allow full access during development
    match /{document=**} {
      allow read, write: if true;
    }

    // Keep the original rules commented out for later implementation
    /*
    // User rules
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Work session rules
      match /workSessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        match /travels/{travelId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }
    
    // Client rules
    match /clients/{clientId} {
      // Reading is allowed for all authenticated users
      allow read: if isAuthenticated();
      
      // Creating and updating is allowed for admin, director and project manager roles
      allow create, update: if canManageClients();
      
      // Deletion is only allowed for admin and director roles
      allow delete: if isAdmin();
    }
    
    // Location log rules
    match /locationLogs/{logId} {
      allow read, write: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Project rules
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['PROJECT_MANAGER', 'ADMIN', 'DIRECTOR']);
    }

    // UI Config rules
    match /uiConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Default rules - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
    */
  }
}